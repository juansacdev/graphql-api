enum Level {
	Principiante
	Intermedio
	Avanzado
}

interface Person {
	id: ID!
	name: String!
	email: String!
}

type Student implements Person {
	id: ID!
	name: String!
	email: String!
	avatar: String
}

type Teacher implements Person {
	id: ID!
	name: String!
	email: String!
	age: Int
}

type Course {
	id: ID!
	title: String!
	teacher: Teacher!
	description: String
	topic: String
	level: Level
	student: [Student]
}

input CourseInput {
	title: String!
	# teacher: PersonInput!
	description: String
	topic: String
	level: Level
	# student: PersonInput
}

input CourseEditInput {
	title: String
	# teacher: PersonEditInput
	description: String
	topic: String
	level: Level
	# student: PersonEditInput
}

input PersonInput {
	name: String!
	email: String!
	avatar: String
	age: Int
}

input PersonEditInput {
	name: String
	email: String
	avatar: String
	age: Int
}

type Query {
	getCourses: [Course!]!
	getCourse(id: ID!): Course

	getStudents: [Student!]!
	getStudent(id: ID!): Student

	getTeachers: [Teacher!]!
	getTeacher(id: ID!): Teacher
}

type Mutation {
	createCourse(input: CourseInput!): Course!
	editCourse(id: ID!, input: CourseEditInput!): Course
	deleteCourse(id: ID!): Course
	addStudent(courseId: ID!, studentId: ID!): Course
	removeStudentFromCourse(courseId: ID!, studentId: ID!): Course
	addTeacher(courseId: ID!, teacherId: ID!): Course
	removeTeacherFromCourse(courseId: ID!, teacherId: ID!): Course

	createStudent(input: PersonInput!): Person!
	editStudent(id: ID!, input: PersonEditInput!): Person
	deleteStudent(id: ID!): Person

	createTeacher(input: PersonInput!): Person!
	editTeacher(id: ID!, input: PersonEditInput!): Person
	deleteTeacher(id: ID!): Person
}
